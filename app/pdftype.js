// Generated by CoffeeScript 1.8.0
var PdfType, childpr, fs, path, settings;

fs = require("fs-extra");

path = require("path");

childpr = require("child_process");

settings = require("./settings");

PdfType = (function() {
  function PdfType(srcfile, destfile) {
    this.options = [];
    this.srcfile = path.normalize(srcfile);
    if (destfile) {
      this.destfile = path.normalize(destfile);
    } else {
      this.destfile = srcfile + ".html";
    }
  }

  PdfType.prototype.tune = function(opts) {
    if (!opts) {
      return;
    }
    if (typeof opts === "string") {
      if (!settings.pdf[opts]) {
        return "Предустановленый набор настроек не найден";
      }
      this.options = settings.pdf[opts];
      return;
    }
    if (Array.isArray(opts)) {
      this.options = this.options.concat(opts);
      return;
    }
    return "Опции должны быть именем предустановленных настроек, либо массивом строк с опциями";
  };

  PdfType.prototype["do"] = function(cb) {
    var args, child, error, from, to, wd;
    from = path.basename(this.srcfile);
    to = path.basename(this.destfile);
    wd = path.dirname(this.srcfile);
    args = [from, to].concat(this.options);
    error = "";
    child = childpr.spawn("pdf2htmlEX", args, {
      cwd: wd
    });
    child.stdout.on("data", function(chunk) {});
    child.stderr.on("data", function(chunk) {
      return error += chunk.toString();
    });
    return child.on("close", (function(_this) {
      return function(code, signal) {
        var fromFile;
        if (code !== 0) {
          return cb(error);
        }
        fromFile = wd + "/" + to;
        if (fromFile === _this.destfile) {
          return cb();
        }
        return fs.move(fromFile, _this.destfile, cb);
      };
    })(this));
  };

  return PdfType;

})();

module.exports = PdfType;
